// ==UserScript==
// @name         叔叔不约自动配对助手(GM优化版)
// @namespace    wwbnq
// @version      2.8
// @description  针对Greasemonkey优化的自动配对助手
// @author       WWBNQ
// @match        https://www.shushubuyue.net/*
// @match        https://www.shushubuyue.com/*
// @match        http://www.shushubuyue.net/*
// @match        http://www.shushubuyue.com/*
// @grant        GM.setValue
// @grant        GM.getValue
// @grant        window.close
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    const CONFIG = {
        CHECK_INTERVAL: 500 + Math.random() * 200,  // 500-700ms
        MIN_DELAY: 400,          // 400ms
        MAX_DELAY: 1000,         // 1000ms
        LEAVE_MIN_DELAY: 500,    // 500ms
        LEAVE_MAX_DELAY: 1500,   // 1500ms
        CHAT_MIN_DELAY: 500,     // 500ms
        CHAT_MAX_DELAY: 1200,    // 1200ms
        TYPE_SPEED: {
            MIN: 50,             // 50ms/字
            MAX: 150             // 150ms/字
        }
    };

    const GREETINGS = [
        "hi~",
        "你好呀",
        "在吗",
        "hello",
        "你好",
        "嗨",
        "在么",
        "hi",
        "hey",
        "嗨~"
    ];

    let isLocked = false;
    let isScriptEnabled = true;
    let matchCount = 0;
    let startTime = Date.now();
    let isInLeaveProcess = false;
    let lastActionTime = Date.now();

    function getRandomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min) + Math.random() * 100;
    }

    function getRandomGreeting() {
        return GREETINGS[Math.floor(Math.random() * GREETINGS.length)];
    }

    async function simulateTyping(msgInput, text) {
        msgInput.focus();
        const originalText = text;

        // 降低错误概率到3%
        const willMakeError = Math.random() < 0.03;
        const errorPosition = willMakeError ? Math.floor(Math.random() * text.length) : -1;

        for(let i = 0; i < text.length; i++) {
            if(i === errorPosition) {
                // 输入错误字符
                const wrongChar = String.fromCharCode(97 + Math.floor(Math.random() * 26));
                msgInput.value = text.substring(0, i) + wrongChar;
                msgInput.dispatchEvent(new Event('input'));

                // 停顿一下，模拟发现错误的时间
                await new Promise(r => setTimeout(r, getRandomDelay(200, 400)));

                // 删除错误字符
                msgInput.value = text.substring(0, i);
                msgInput.dispatchEvent(new Event('input'));

                // 短暂停顿后继续
                await new Promise(r => setTimeout(r, getRandomDelay(100, 200)));

                // 继续正常输入
                msgInput.value = text.substring(0, i + 1);
                msgInput.dispatchEvent(new Event('input'));
            } else {
                msgInput.value = text.substring(0, i + 1);
                msgInput.dispatchEvent(new Event('input'));
            }
            await new Promise(r => setTimeout(r,
                getRandomDelay(CONFIG.TYPE_SPEED.MIN, CONFIG.TYPE_SPEED.MAX)));
        }
        return msgInput.value === originalText;
    }

    function findLeaveButton() {
        const selectors = [
            "a.button-link.leave",
            "a.button-link.chat-control",
            "a.leave",
            ".chat-control",
            "span.chat-control",
            "a[class*='leave']",
            "a[class*='chat-control']"
        ];

        for (const selector of selectors) {
            const button = document.querySelector(selector);
            if (button) return button;
        }
        return null;
    }

    function hasNewSystemMessage() {
        try {
            const pageText = document.body.innerText;
            return pageText.includes("对方离开了") ||
                   pageText.includes("对方已离开") ||
                   pageText.includes("对方离开");
        } catch (error) {
            return false;
        }
    }

    function hasLeaveModal() {
        return !!document.querySelector(".actions-modal");
    }

    async function handleLeaveModal() {
        const confirmButton = document.querySelector(".actions-modal-button-bold.color-danger");
        if (confirmButton) {
            await new Promise(r => setTimeout(r, getRandomDelay(200, 400)));
            confirmButton.click();
            await new Promise(r => setTimeout(r, CONFIG.LEAVE_MAX_DELAY));
        }
    }

    function createStatsDisplay() {
        const statsDiv = document.createElement('div');
        statsDiv.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: linear-gradient(145deg, rgba(0,0,0,0.2), rgba(40,40,40,0.3));
            color: rgba(255,255,255,0.9);
            padding: 15px;
            border-radius: 12px;
            font-size: 14px;
            z-index: 9999;
            font-family: 'Arial', sans-serif;
            box-shadow: 0 4px 15px rgba(0,0,0,.1);
            border: 1px solid rgba(255,255,255,0.1);
            min-width: 150px;
            backdrop-filter: blur(2px);
            transition: all 0.3s ease;
            user-select: none;
            opacity: 0.85;
        `;

        const toggleButton = document.createElement('button');
        toggleButton.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: ${isScriptEnabled ? '#4CAF50' : '#f44336'};
            border: none;
            border-radius: 50%;
            width: 12px;
            height: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            opacity: 0.8;
        `;

        toggleButton.addEventListener('click', () => {
            isScriptEnabled = !isScriptEnabled;
            toggleButton.style.background = isScriptEnabled ? '#4CAF50' : '#f44336';
        });

        statsDiv.appendChild(toggleButton);
        document.body.appendChild(statsDiv);
        return statsDiv;
    }

    function updateStatsDisplay(statsDiv) {
        const runTime = Math.floor((Date.now() - startTime) / 60000);
        const hours = Math.floor(runTime / 60);
        const minutes = runTime % 60;
        const timeStr = hours > 0 ? `${hours}时${minutes}分` : `${minutes}分`;

        statsDiv.innerHTML = `
            <div style="text-align: center; margin-bottom: 10px; font-weight: bold;
                        border-bottom: 1px solid rgba(255,255,255,0.1); padding-bottom: 5px;">
                配对统计
            </div>
            <div style="margin-bottom: 8px;">
                <span style="color: #ff6b6b;">♥</span> 次数: ${matchCount}
            </div>
            <div style="margin-bottom: 8px;">
                <span style="color: ${isLocked ? '#4CAF50' : '#FFA726'};">●</span>
                状态: ${isLocked ? '聊天' : '搜索'}
            </div>
            <div style="font-size: 12px; color: rgba(255,255,255,0.7);">
                时间: ${timeStr}
            </div>
        `;
    }

    async function handlePartnerLeft() {
        if (isInLeaveProcess) return;

        isLocked = false;
        isInLeaveProcess = true;

        try {
            if (hasLeaveModal()) {
                await handleLeaveModal();
                await startNewChat();
                return;
            }

            const leaveButton = findLeaveButton();
            if (leaveButton) {
                await new Promise(r => setTimeout(r, getRandomDelay(200, 400)));
                leaveButton.click();
                await new Promise(r => setTimeout(r, CONFIG.LEAVE_MIN_DELAY));
            }

            await startNewChat();

        } catch (error) {
            console.error("离开处理出错");
        } finally {
            isLocked = false;
            isInLeaveProcess = false;
        }
    }

    async function handleMaleMatch() {
        if (isInLeaveProcess) return;

        try {
            isInLeaveProcess = true;

            if (hasLeaveModal()) {
                await handleLeaveModal();
                await startNewChat();
                return;
            }

            const leaveButton = findLeaveButton();
            if (leaveButton) {
                await new Promise(r => setTimeout(r, getRandomDelay(200, 400)));
                leaveButton.click();
                await new Promise(r => setTimeout(r, CONFIG.LEAVE_MIN_DELAY));
            }

            await handleLeaveModal();
            await startNewChat();

        } catch (error) {
            console.error("男生匹配处理出错");
        } finally {
            isLocked = false;
            isInLeaveProcess = false;
        }
    }

    async function handleFemaleMatch() {
        if (isLocked || isInLeaveProcess) {
            console.log("已锁定或正在离开过程中");
            return;
        }

        try {
            if (hasNewSystemMessage() || hasLeaveModal()) {
                console.log("检测到系统消息或离开对话框");
                await handlePartnerLeft();
                return;
            }

            const sentMessages = document.querySelectorAll(".message.right");
            if (sentMessages.length > 0) {
                console.log("已发送过消息");
                isLocked = true;
                return;
            }

            const msgInput = document.querySelector("#msgInput");
            const sendButton = document.querySelector("a.button-link.msg-send");

            if (msgInput && sendButton) {
                console.log("找到输入框和发送按钮，准备发送消息");

                if (hasNewSystemMessage() || hasLeaveModal()) {
                    console.log("发送前检测到系统消息或离开对话框");
                    await handlePartnerLeft();
                    return;
                }

                const greeting = getRandomGreeting();
                console.log("选择的打招呼语句:", greeting);

                const typingSuccess = await simulateTyping(msgInput, greeting);
                console.log("打字模拟结果:", typingSuccess);

                await new Promise(r => setTimeout(r, getRandomDelay(200, 500)));

                if (hasNewSystemMessage() || hasLeaveModal()) {
                    console.log("打字后检测到系统消息或离开对话框");
                    await handlePartnerLeft();
                    return;
                }

                if (typingSuccess) {
                    console.log("准备点击发送按钮");
                    sendButton.click();
                    isLocked = true;
                    matchCount++;
                    lastActionTime = Date.now();
                    console.log("消息已发送");
                }
            } else {
                console.log("未找到输入框或发送按钮");
            }
        } catch (error) {
            console.error("女生匹配处理出错", error);
            isLocked = false;
        }
    }

    async function startNewChat() {
        try {
            const restartButton = document.querySelector("span.chat-control");
            if (restartButton && restartButton.innerText === "重新开始") {
                await new Promise(r => setTimeout(r, getRandomDelay(200, 400)));
                restartButton.click();

                await new Promise(r => setTimeout(r, CONFIG.LEAVE_MIN_DELAY));

                const secondCheck = document.querySelector("span.chat-control");
                if (secondCheck && secondCheck.innerText === "重新开始") {
                    secondCheck.click();
                }
            }
            isLocked = false;
        } catch (error) {
            console.error("重新开始出错");
            isLocked = false;
        }
    }

    async function mainLoop() {
        if (!isScriptEnabled) return;

        try {
            if (Date.now() - lastActionTime < CONFIG.CHECK_INTERVAL) return;

            if (hasLeaveModal()) {
                await handleLeaveModal();
                await startNewChat();
                return;
            }

            if (hasNewSystemMessage()) {
                await handlePartnerLeft();
                return;
            }

            if (isLocked) {
                if (hasNewSystemMessage()) {
                    await handlePartnerLeft();
                }
                return;
            }

            const partnerInfo = document.querySelector("#partnerInfoText");
            const partnerGender = partnerInfo ? partnerInfo.innerText : null;

            if (!partnerGender) return;

            if (partnerGender.includes("男生")) {
                await handleMaleMatch();
            } else if (partnerGender.includes("女生")) {
                await handleFemaleMatch();
            }

        } catch (error) {
            console.error("主循环出错");
            isLocked = false;
            isInLeaveProcess = false;
        }
    }

    function init() {
        const statsDiv = createStatsDisplay();

        const runMainLoop = () => {
            mainLoop();
            updateStatsDisplay(statsDiv);
            setTimeout(runMainLoop, CONFIG.CHECK_INTERVAL + Math.random() * 200);
        };

        setTimeout(runMainLoop, getRandomDelay(1000, 1500));
    }

    setTimeout(init, getRandomDelay(1000, 1500));
})();
